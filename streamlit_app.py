import streamlit as st
import numpy as np
import pickle
from tensorflow.keras.applications.vgg16 import preprocess_input
from tensorflow.keras.preprocessing.image import load_img, img_to_array
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences

# Load the pre-trained model and tokenizer
model = load_model('best_model (1).h5')

# Load the tokenizer
with open('tokenizer.pkl', 'rb') as f:
    tokenizer = pickle.load(f)

# Load the features dictionary
with open('features.pkl', 'rb') as f:
    features = pickle.load(f)

# Function to preprocess image
def preprocess_image(image):
    image = load_img(image, target_size=(224, 224))
    image = img_to_array(image)
    image = image.reshape((1, image.shape[0], image.shape[1], image.shape[2]))
    image = preprocess_input(image)
    return image

# Function to generate caption
def predict_caption(model, image, tokenizer, max_length):
    in_text = 'startseq'
    for _ in range(max_length):
        sequence = tokenizer.texts_to_sequences([in_text])[0]
        sequence = pad_sequences([sequence], maxlen=max_length)
        yhat = model.predict([image, sequence], verbose=0)
        yhat = np.argmax(yhat)
        word = idx_to_word(yhat, tokenizer)
        if word is None:
            break
        in_text += ' ' + word
        if word == 'endseq':
            break
    return in_text.replace('startseq', '').replace('endseq', '').strip()

# Function to map index to word
def idx_to_word(integer, tokenizer):
    for word, index in tokenizer.word_index.items():
        if index == integer:
            return word
    return None

# Streamlit app
st.title('Image Caption Generator')
st.write('Upload an image and get a caption generated by the model.')

uploaded_file = st.file_uploader("Choose an image...", type=["jpg", "jpeg", "png"])

if uploaded_file is not None:
    # Preprocess the image
    image = preprocess_image(uploaded_file)
    
    # Extract features from the image
    image_id = uploaded_file.name.split('.')[0]
    features[image_id] = model.predict(image, verbose=0)
    
    # Generate caption
    max_length = 35  # Define the max length used during training
    caption = predict_caption(model, image, tokenizer, max_length)
    
    st.image(uploaded_file, caption='Uploaded Image', use_column_width=True)
    st.write(f'Generated Caption: {caption}')
